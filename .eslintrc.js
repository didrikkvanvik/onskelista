/* eslint-disable max-len */
module.exports = {
    parser: '@typescript-eslint/parser',
    extends: ['eslint:recommended', 'plugin:react/recommended', 'prettier'],
    plugins: ['prettier'],
    rules: {
        'array-bracket-spacing': 0,
        'array-callback-return': 'error',
        'arrow-body-style': 0,
        'arrow-parens': 0,
        'brace-style': 0,
        'class-methods-use-this': 'off',
        'comma-dangle': ['error', 'always-multiline'],
        'consistent-return': 'off',
        'default-case': 0,
        'eol-last': 1,
        'generator-star-spacing': ['error', { before: true, after: true }],
        'import/extensions': 0,
        'import/no-cycle': 'off',
        'import/no-extraneous-dependencies': 0,
        'import/prefer-default-export': 'off',
        indent: ['error', 4, { SwitchCase: 1 }],
        'max-len': ['error', 160],
        'no-alert': 0,
        'no-case-declarations': 0,
        'jsx-control-statements/jsx-jcs-no-undef': 'off',
        'no-console': 'error',
        'no-lonely-if': 0,
        'no-extra-parens': [
            'error',
            'all',
            {
                ignoreJSX: 'multi-line',
                nestedBinaryExpressions: false,
                enforceForArrowConditionals: false,
            },
        ],
        'no-multiple-empty-lines': ['error', { max: 1, maxBOF: 0, maxEOF: 0 }],
        'no-plusplus': 'off',
        'no-restricted-syntax': [
            'warn',
            {
                selector: 'ForInStatement',
                message:
                    'for..in loops iterate over the entire prototype chain, which is virtually never what you want. Use Object.{keys,values,entries}, and iterate over the resulting array.',
            },
            {
                selector: 'ForOfStatement',
                message:
                    'iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations.',
            },
            {
                selector: 'LabeledStatement',
                message:
                    'Labels are a form of GOTO; using them makes code confusing and hard to maintain and understand.',
            },
            {
                selector: 'WithStatement',
                message:
                    '`with` is disallowed in strict mode because it makes code impossible to predict and optimize.',
            },
        ],
        'react/jsx-tag-spacing': [
            'error',
            {
                closingSlash: 'never',
                beforeSelfClosing: 'always',
                afterOpening: 'never',
                beforeClosing: 'never',
            },
        ],
        'react/jsx-wrap-multilines': [
            'error',
            {
                declaration: 'parens-new-line',
                assignment: 'parens-new-line',
                return: 'parens-new-line',
                arrow: 'parens-new-line',
                condition: 'parens-new-line',
                logical: 'parens-new-line',
                prop: 'parens-new-line',
            },
        ],
        'no-shadow': 2,
        'no-underscore-dangle': 'off',
        'no-unneeded-ternary': 'error',
        'no-unused-vars': 'off',
        'no-use-before-define': 'off',
        'no-warning-comments': ['warn', { terms: ['TODO'], location: 'anywhere' }],
        'object-curly-spacing': ['error', 'always'],
        'object-shorthand': ['error', 'always'],
        'one-var': 0,
        'prefer-const': 'off',
        'prefer-destructuring': 'off',
        'prefer-object-spread': 'error',
        'prefer-template': 'error',
        'quote-props': ['error', 'as-needed', { numbers: true }],
        'react/forbid-prop-types': 'off',
        'react/jsx-boolean-value': ['error', 'never'],
        'react/jsx-closing-bracket-location': ['error', 'line-aligned'],
        'react/jsx-closing-tag-location': ['error'],
        'react/jsx-curly-brace-presence': ['error', { props: 'never', children: 'never' }],
        // 'react/jsx-curly-spacing': ['error', { when: 'always' }],
        // 'react/jsx-equals-spacing': 'error',
        'react/jsx-filename-extension': 'off',
        'react/jsx-first-prop-new-line': ['error', 'multiline-multiprop'],
        'react/jsx-indent': ['error', 4],
        'react/jsx-indent-props': 'off',
        'react/jsx-max-props-per-line': ['error', { maximum: 1, when: 'multiline' }],
        'react/jsx-no-undef': [2, { allowGlobals: true }],
        'react/jsx-sort-props': ['error', { ignoreCase: true }],
        'react/no-array-index-key': 'off',
        'react/no-typos': 'off',
        'react/no-unused-prop-types': 'error',
        'react/no-unused-state': 'error',
        'react/no-will-update-set-state': 'error',
        'react/prefer-stateless-function': 'off',
        'react/prop-types': 'off',
        'react/react-in-jsx-scope': 'warn',
        'react/require-default-props': 'off',
        'react/self-closing-comp': 'error',
        'react/sort-comp': 'off',
        'prettier/prettier': 'error',
        'react/sort-prop-types': 'error',
        'require-await': 'error',
        semi: ['error', 'never'],
        'space-infix-ops': 'error',
        'template-curly-spacing': ['error', 'never'],
        'global-require': 'off',
        'no-tabs': 'off',
    },
    overrides: [
        {
            files: ['packages/**/*.js'],
        },
    ],
}
